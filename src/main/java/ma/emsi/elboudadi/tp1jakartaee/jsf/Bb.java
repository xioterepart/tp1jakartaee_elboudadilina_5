package ma.emsi.elboudadi.tp1jakartaee.jsf;

import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.model.SelectItem;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

/**
 * Backing bean pour la page JSF index.xhtml.
 * Port√©e view pour conserver l'√©tat de la conversation qui dure pendant plusieurs requ√™tes HTTP.
 * La port√©e view n√©cessite l'impl√©mentation de Serializable (le backing bean peut √™tre mis en m√©moire secondaire).
 */
@Named
@ViewScoped
public class Bb implements Serializable {

    /**
     * R√¥le "syst√®me" que l'on attribuera plus tard √† un LLM.
     * Valeur par d√©faut que l'utilisateur peut modifier.
     * Possible d'√©crire un nouveau r√¥le dans la liste d√©roulante.
     */
    private String roleSysteme;

    /**
     * Quand le r√¥le est choisi par l'utilisateur dans la liste d√©roulante,
     * il n'est plus possible de le modifier (voir code de la page JSF), sauf si on veut un nouveau chat.
     */
    private boolean roleSystemeChangeable = true;

    /**
     * Liste de tous les r√¥les de l'API pr√©d√©finis.
     */
    private List<SelectItem> listeRolesSysteme;

    /**
     * Derni√®re question pos√©e par l'utilisateur.
     */
    private String question;
    /**
     * Derni√®re r√©ponse de l'API OpenAI.
     */
    private String reponse;
    /**
     * La conversation depuis le d√©but.
     */
    private StringBuilder conversation = new StringBuilder();

    private String texteRequeteJson;

    private String texteReponseJson;

    private boolean debug;



    /**
     * Contexte JSF. Utilis√© pour qu'un message d'erreur s'affiche dans le formulaire.
     */
    @Inject
    private FacesContext facesContext;

    /**
     * Obligatoire pour un bean CDI (classe g√©r√©e par CDI), s'il y a un autre constructeur.
     */
    public Bb() {
    }



    public String getRoleSysteme() {
        return roleSysteme;
    }

    public void setRoleSysteme(String roleSysteme) {
        this.roleSysteme = roleSysteme;
    }

    public boolean isRoleSystemeChangeable() {
        return roleSystemeChangeable;
    }

    public String getQuestion() {
        return question;
    }

    public void setQuestion(String question) {
        this.question = question;
    }

    public String getReponse() {
        return reponse;
    }

    /**
     * setter indispensable pour le textarea.
     *
     * @param reponse la r√©ponse √† la question.
     */
    public void setReponse(String reponse) {
        this.reponse = reponse;
    }

    public String getConversation() {
        return conversation.toString();
    }

    public void setConversation(String conversation) {
        this.conversation = new StringBuilder(conversation);
    }

    public String getTexteRequeteJson() {
        return texteRequeteJson;
    }

    public void setTexteRequeteJson(String texteRequeteJson) {
        this.texteRequeteJson = texteRequeteJson;
    }

    // üü¢ Getter et Setter pour texteReponseJson
    public String getTexteReponseJson() {
        return texteReponseJson;
    }

    public void setTexteReponseJson(String texteReponseJson) {
        this.texteReponseJson = texteReponseJson;
    }

    public boolean isDebug() {
        return debug;
    }

    public void setDebug(boolean debug) {
        this.debug = debug;
    }


    /**
     * Envoie la question au serveur.
     * En attendant de l'envoyer √† un LLM, le serveur fait un traitement quelconque, juste pour tester :
     * Le traitement consiste √† copier la question en minuscules et √† l'entourer avec "||". Le r√¥le syst√®me
     * est ajout√© au d√©but de la premi√®re r√©ponse.
     *
     * @return null pour rester sur la m√™me page.
     */

    public void toggleDebug() {
        this.setDebug(!isDebug());
    }

    public String envoyer() {
        if (question == null || question.isBlank()) {
            // Erreur ! Le formulaire va √™tre r√©affich√© en r√©ponse √† la requ√™te POST, avec un message d'erreur.
            FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Texte question vide", "Il manque le texte de la question");
            facesContext.addMessage(null, message);
            return null;
        }
        // Entourer la r√©ponse avec "||".
        this.reponse = "||";
        // Si la conversation n'a pas encore commenc√©, ajouter le r√¥le syst√®me au d√©but de la r√©ponse
        if (this.conversation.isEmpty()) {
            // Ajouter le r√¥le syst√®me au d√©but de la r√©ponse
            this.reponse += roleSysteme.toUpperCase(Locale.FRENCH) + "\n";
            // Invalide le bouton pour changer le r√¥le syst√®me
            this.roleSystemeChangeable = false;
        }
        this.reponse += question.toLowerCase(Locale.FRENCH) + "||";
        // La conversation contient l'historique des questions-r√©ponses depuis le d√©but.
        afficherConversation();
        return null;
    }


    /**
     * Pour un nouveau chat.
     * Termine la port√©e view en retournant "index" (la page index.xhtml sera affich√©e apr√®s le traitement
     * effectu√© pour construire la r√©ponse) et pas null. null aurait indiqu√© de rester dans la m√™me page (index.xhtml)
     * sans changer de vue.
     * Le fait de changer de vue va faire supprimer l'instance en cours du backing bean par CDI et donc on reprend
     * tout comme au d√©but puisqu'une nouvelle instance du backing va √™tre utilis√©e par la page index.xhtml.
     * @return "index"
     */
    public String nouveauChat() {
        return "index";
    }

    /**
     * Pour afficher la conversation dans le textArea de la page JSF.
     */
    private void afficherConversation() {
        this.conversation.append("== User:\n").append(question).append("\n== Serveur:\n").append(reponse).append("\n");
    }

    public List<SelectItem> getRolesSysteme() {
        if (this.listeRolesSysteme == null) {
            // G√©n√®re les r√¥les de l'API pr√©d√©finis
            this.listeRolesSysteme = new ArrayList<>();
            // Vous pouvez √©videmment √©crire ces r√¥les dans la langue que vous voulez.
            String role = """
                    You are a helpful assistant. You help the user to find the information they need.
                    If the user type a question, you answer it.
                    """;
            // 1er argument : la valeur du r√¥le, 2√®me argument : le libell√© du r√¥le
            this.listeRolesSysteme.add(new SelectItem(role, "Assistant"));

            role = """
                    You are an interpreter. You translate from English to French and from French to English.
                    If the user type a French text, you translate it into English.
                    If the user type an English text, you translate it into French.
                    If the text contains only one to three words, give some examples of usage of these words in English.
                    """;
            this.listeRolesSysteme.add(new SelectItem(role, "Traducteur Anglais-Fran√ßais"));

            role = """
                    Your are a travel guide. If the user type the name of a country or of a town,
                    you tell them what are the main places to visit in the country or the town
                    are you tell them the average price of a meal.
                    """;
            this.listeRolesSysteme.add(new SelectItem(role, "Guide touristique"));
        }

        return this.listeRolesSysteme;
    }
}